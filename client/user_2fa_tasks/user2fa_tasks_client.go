// Code generated by go-swagger; DO NOT EDIT.

package user_2fa_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user 2fa tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user 2fa tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
OtpAuthCreate creates a temporary token for the logged in user the response contains the qr code as a base64 image
*/
func (a *Client) OtpAuthCreate(params *OtpAuthCreateParams) (*OtpAuthCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOtpAuthCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "otpAuthCreate",
		Method:             "POST",
		PathPattern:        "/OTPAuth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OtpAuthCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OtpAuthCreateOK), nil

}

/*
OtpAuthInfo gets the token configuration of the logged in user
*/
func (a *Client) OtpAuthInfo(params *OtpAuthInfoParams) (*OtpAuthInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOtpAuthInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "otpAuthInfo",
		Method:             "GET",
		PathPattern:        "/OTPAuth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OtpAuthInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OtpAuthInfoOK), nil

}

/*
User2faAktivate activates the 2fa authentication for the logged in user the response contains the rescue tokens
*/
func (a *Client) User2faAktivate(params *User2faAktivateParams) (*User2faAktivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUser2faAktivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user2faAktivate",
		Method:             "PUT",
		PathPattern:        "/user/_2fa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &User2faAktivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*User2faAktivateOK), nil

}

/*
User2faDelete deactivates the 2fa of the logged in user

The auth type of the user is set back to password.
*/
func (a *Client) User2faDelete(params *User2faDeleteParams) (*User2faDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUser2faDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user2faDelete",
		Method:             "DELETE",
		PathPattern:        "/user/_2fa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &User2faDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*User2faDeleteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
