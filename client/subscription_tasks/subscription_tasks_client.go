// Code generated by go-swagger; DO NOT EDIT.

package subscription_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscription tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SubscriptionCreate creates subscription

Create a new subscription contract.
*/
func (a *Client) SubscriptionCreate(params *SubscriptionCreateParams) (*SubscriptionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subscriptionCreate",
		Method:             "POST",
		PathPattern:        "/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionCreateOK), nil

}

/*
SubscriptionUpdate updates subscription

update a subscription contract.
*/
func (a *Client) SubscriptionUpdate(params *SubscriptionUpdateParams) (*SubscriptionUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subscriptionUpdate",
		Method:             "PUT",
		PathPattern:        "/subscription/{contractId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionUpdateOK), nil

}

/*
SubscriptionUpgrade upgrades subscription

upgrade a subscription contract.
*/
func (a *Client) SubscriptionUpgrade(params *SubscriptionUpgradeParams) (*SubscriptionUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subscriptionUpgrade",
		Method:             "PUT",
		PathPattern:        "/subscription/{contractId}/_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionUpgradeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
