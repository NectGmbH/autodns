// Code generated by go-swagger; DO NOT EDIT.

package id4me_identity_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/NectGmbH/autodns/models"
)

// NewId4MeIdentityListParams creates a new Id4MeIdentityListParams object
// with the default values initialized.
func NewId4MeIdentityListParams() *Id4MeIdentityListParams {
	var ()
	return &Id4MeIdentityListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewId4MeIdentityListParamsWithTimeout creates a new Id4MeIdentityListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewId4MeIdentityListParamsWithTimeout(timeout time.Duration) *Id4MeIdentityListParams {
	var ()
	return &Id4MeIdentityListParams{

		timeout: timeout,
	}
}

// NewId4MeIdentityListParamsWithContext creates a new Id4MeIdentityListParams object
// with the default values initialized, and the ability to set a context for a request
func NewId4MeIdentityListParamsWithContext(ctx context.Context) *Id4MeIdentityListParams {
	var ()
	return &Id4MeIdentityListParams{

		Context: ctx,
	}
}

// NewId4MeIdentityListParamsWithHTTPClient creates a new Id4MeIdentityListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewId4MeIdentityListParamsWithHTTPClient(client *http.Client) *Id4MeIdentityListParams {
	var ()
	return &Id4MeIdentityListParams{
		HTTPClient: client,
	}
}

/*Id4MeIdentityListParams contains all the parameters to send to the API endpoint
for the id4 me identity list operation typically these are written to a http.Request
*/
type Id4MeIdentityListParams struct {

	/*XDomainrobotContext*/
	XDomainrobotContext *string
	/*XDomainrobotDemo*/
	XDomainrobotDemo *string
	/*XDomainrobotOwnerContext*/
	XDomainrobotOwnerContext *string
	/*XDomainrobotOwnerUser*/
	XDomainrobotOwnerUser *string
	/*XDomainrobotPIN*/
	XDomainrobotPIN *string
	/*XDomainrobotSessionID*/
	XDomainrobotSessionID *string
	/*XDomainrobotWS*/
	XDomainrobotWS *string
	/*Body
	  query

	*/
	Body *models.Query

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithTimeout(timeout time.Duration) *Id4MeIdentityListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithContext(ctx context.Context) *Id4MeIdentityListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithHTTPClient(client *http.Client) *Id4MeIdentityListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDomainrobotContext adds the xDomainrobotContext to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotContext(xDomainrobotContext *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotContext(xDomainrobotContext)
	return o
}

// SetXDomainrobotContext adds the xDomainrobotContext to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotContext(xDomainrobotContext *string) {
	o.XDomainrobotContext = xDomainrobotContext
}

// WithXDomainrobotDemo adds the xDomainrobotDemo to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotDemo(xDomainrobotDemo *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotDemo(xDomainrobotDemo)
	return o
}

// SetXDomainrobotDemo adds the xDomainrobotDemo to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotDemo(xDomainrobotDemo *string) {
	o.XDomainrobotDemo = xDomainrobotDemo
}

// WithXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotOwnerContext(xDomainrobotOwnerContext)
	return o
}

// SetXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) {
	o.XDomainrobotOwnerContext = xDomainrobotOwnerContext
}

// WithXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotOwnerUser(xDomainrobotOwnerUser)
	return o
}

// SetXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) {
	o.XDomainrobotOwnerUser = xDomainrobotOwnerUser
}

// WithXDomainrobotPIN adds the xDomainrobotPIN to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotPIN(xDomainrobotPIN *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotPIN(xDomainrobotPIN)
	return o
}

// SetXDomainrobotPIN adds the xDomainrobotPIN to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotPIN(xDomainrobotPIN *string) {
	o.XDomainrobotPIN = xDomainrobotPIN
}

// WithXDomainrobotSessionID adds the xDomainrobotSessionID to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotSessionID(xDomainrobotSessionID *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotSessionID(xDomainrobotSessionID)
	return o
}

// SetXDomainrobotSessionID adds the xDomainrobotSessionId to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotSessionID(xDomainrobotSessionID *string) {
	o.XDomainrobotSessionID = xDomainrobotSessionID
}

// WithXDomainrobotWS adds the xDomainrobotWS to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithXDomainrobotWS(xDomainrobotWS *string) *Id4MeIdentityListParams {
	o.SetXDomainrobotWS(xDomainrobotWS)
	return o
}

// SetXDomainrobotWS adds the xDomainrobotWS to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetXDomainrobotWS(xDomainrobotWS *string) {
	o.XDomainrobotWS = xDomainrobotWS
}

// WithBody adds the body to the id4 me identity list params
func (o *Id4MeIdentityListParams) WithBody(body *models.Query) *Id4MeIdentityListParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the id4 me identity list params
func (o *Id4MeIdentityListParams) SetBody(body *models.Query) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *Id4MeIdentityListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XDomainrobotContext != nil {

		// header param X-Domainrobot-Context
		if err := r.SetHeaderParam("X-Domainrobot-Context", *o.XDomainrobotContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotDemo != nil {

		// header param X-Domainrobot-Demo
		if err := r.SetHeaderParam("X-Domainrobot-Demo", *o.XDomainrobotDemo); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerContext != nil {

		// header param X-Domainrobot-Owner-Context
		if err := r.SetHeaderParam("X-Domainrobot-Owner-Context", *o.XDomainrobotOwnerContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerUser != nil {

		// header param X-Domainrobot-Owner-User
		if err := r.SetHeaderParam("X-Domainrobot-Owner-User", *o.XDomainrobotOwnerUser); err != nil {
			return err
		}

	}

	if o.XDomainrobotPIN != nil {

		// header param X-Domainrobot-PIN
		if err := r.SetHeaderParam("X-Domainrobot-PIN", *o.XDomainrobotPIN); err != nil {
			return err
		}

	}

	if o.XDomainrobotSessionID != nil {

		// header param X-Domainrobot-SessionId
		if err := r.SetHeaderParam("X-Domainrobot-SessionId", *o.XDomainrobotSessionID); err != nil {
			return err
		}

	}

	if o.XDomainrobotWS != nil {

		// header param X-Domainrobot-WS
		if err := r.SetHeaderParam("X-Domainrobot-WS", *o.XDomainrobotWS); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
