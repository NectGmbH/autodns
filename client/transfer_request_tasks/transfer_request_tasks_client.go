// Code generated by go-swagger; DO NOT EDIT.

package transfer_request_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new transfer request tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfer request tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TransferOutAnswer answers transfer out

ack or nack the transfer request.
*/
func (a *Client) TransferOutAnswer(params *TransferOutAnswerParams) (*TransferOutAnswerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutAnswerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutAnswer",
		Method:             "POST",
		PathPattern:        "/transferout/{domain}/{_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutAnswerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TransferOutAnswerOK), nil

}

/*
TransferOutInfo gets transfer request

Fetches supplied .
*/
func (a *Client) TransferOutInfo(params *TransferOutInfoParams) (*TransferOutInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutInfo",
		Method:             "GET",
		PathPattern:        "/transferout/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TransferOutInfoOK), nil

}

/*
TransferOutList lists transfer out

Inquire a list of transferOut with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) TransferOutList(params *TransferOutListParams) (*TransferOutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutList",
		Method:             "POST",
		PathPattern:        "/transferout/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TransferOutListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
