// Code generated by go-swagger; DO NOT EDIT.

package backup_mx_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new backup mx tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup mx tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BackupMxCreate creates backup mx

Create a new backup mx.
*/
func (a *Client) BackupMxCreate(params *BackupMxCreateParams) (*BackupMxCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxCreate",
		Method:             "POST",
		PathPattern:        "/backupMx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BackupMxCreateOK), nil

}

/*
BackupMxDelete deletes backup mx

Delete an existing backup mx.
*/
func (a *Client) BackupMxDelete(params *BackupMxDeleteParams) (*BackupMxDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxDelete",
		Method:             "DELETE",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BackupMxDeleteOK), nil

}

/*
BackupMxInfo gets backup mx

Inquire the data for the specified backup mx.
*/
func (a *Client) BackupMxInfo(params *BackupMxInfoParams) (*BackupMxInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxInfo",
		Method:             "GET",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BackupMxInfoOK), nil

}

/*
BackupMxList lists backup mx

Inquire a list of backup mx's with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) BackupMxList(params *BackupMxListParams) (*BackupMxListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxList",
		Method:             "POST",
		PathPattern:        "/backupMx/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BackupMxListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
