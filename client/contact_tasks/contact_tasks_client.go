// Code generated by go-swagger; DO NOT EDIT.

package contact_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contact tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contact tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContactCreate creates contact

Create a new domain contact.
*/
func (a *Client) ContactCreate(params *ContactCreateParams) (*ContactCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactCreate",
		Method:             "POST",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContactCreateOK), nil

}

/*
ContactDelete deletes contact

Delete an existing domain contact.
*/
func (a *Client) ContactDelete(params *ContactDeleteParams) (*ContactDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactDelete",
		Method:             "DELETE",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContactDeleteOK), nil

}

/*
ContactInfo gets contact

Inquire the data for the specified domain contact.
*/
func (a *Client) ContactInfo(params *ContactInfoParams) (*ContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContactInfoOK), nil

}

/*
ContactList lists contact

Inquire a list of contacts with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) ContactList(params *ContactListParams) (*ContactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactList",
		Method:             "POST",
		PathPattern:        "/contact/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContactListOK), nil

}

/*
ContactUpdate updates contact

Update an existing domain contact.
*/
func (a *Client) ContactUpdate(params *ContactUpdateParams) (*ContactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactUpdate",
		Method:             "PUT",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContactUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
