// Code generated by go-swagger; DO NOT EDIT.

package zone_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new zone tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zone tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ZoneAxfr gets axfr

Fetch the axfr data for the specified zone.
*/
func (a *Client) ZoneAxfr(params *ZoneAxfrParams) (*ZoneAxfrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneAxfrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneAxfr",
		Method:             "GET",
		PathPattern:        "/zone/{name}/{nameserver}/_axfr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneAxfrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneAxfrOK), nil

}

/*
ZoneCreate creates zone

Create a zone.
*/
func (a *Client) ZoneCreate(params *ZoneCreateParams) (*ZoneCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneCreate",
		Method:             "POST",
		PathPattern:        "/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneCreateOK), nil

}

/*
ZoneDelete deletes zone

Delete an existing zone.
*/
func (a *Client) ZoneDelete(params *ZoneDeleteParams) (*ZoneDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneDelete",
		Method:             "DELETE",
		PathPattern:        "/zone/{name}/{nameserver}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneDeleteOK), nil

}

/*
ZoneImport imports zone

Import the specified zone.
*/
func (a *Client) ZoneImport(params *ZoneImportParams) (*ZoneImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneImport",
		Method:             "POST",
		PathPattern:        "/zone/{name}/{nameserver}/_import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneImportOK), nil

}

/*
ZoneInfo gets zone

Fetch the data for the specified zone.
*/
func (a *Client) ZoneInfo(params *ZoneInfoParams) (*ZoneInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneInfo",
		Method:             "GET",
		PathPattern:        "/zone/{name}/{nameserver}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneInfoOK), nil

}

/*
ZoneList lists zones

Inquire a list of zones with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) ZoneList(params *ZoneListParams) (*ZoneListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneList",
		Method:             "POST",
		PathPattern:        "/zone/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneListOK), nil

}

/*
ZoneStream zones stream

Add or remove records for any zone with the given name.
*/
func (a *Client) ZoneStream(params *ZoneStreamParams) (*ZoneStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneStream",
		Method:             "POST",
		PathPattern:        "/zone/{name}/_stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneStreamOK), nil

}

/*
ZoneUpdate updates zone

Update an existing zone.
*/
func (a *Client) ZoneUpdate(params *ZoneUpdateParams) (*ZoneUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneUpdate",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{nameserver}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneUpdateOK), nil

}

/*
ZoneUpdateComment updates zone comment

Update an existing zone.
*/
func (a *Client) ZoneUpdateComment(params *ZoneUpdateCommentParams) (*ZoneUpdateCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneUpdateCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneUpdateComment",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{nameserver}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneUpdateCommentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZoneUpdateCommentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
