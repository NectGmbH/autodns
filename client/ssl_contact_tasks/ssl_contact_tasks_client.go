// Code generated by go-swagger; DO NOT EDIT.

package ssl_contact_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ssl contact tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ssl contact tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SslContactCreate creates ssl contact

Create a new sslcontact.
*/
func (a *Client) SslContactCreate(params *SslContactCreateParams) (*SslContactCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSslContactCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sslContactCreate",
		Method:             "POST",
		PathPattern:        "/sslcontact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SslContactCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SslContactCreateOK), nil

}

/*
SslContactDelete deletes ssl contact

Delete an existing sslcontact.
*/
func (a *Client) SslContactDelete(params *SslContactDeleteParams) (*SslContactDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSslContactDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sslContactDelete",
		Method:             "DELETE",
		PathPattern:        "/sslcontact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SslContactDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SslContactDeleteOK), nil

}

/*
SslContactInfo gets ssl contact

Inquire the data for the specified sslcontact.
*/
func (a *Client) SslContactInfo(params *SslContactInfoParams) (*SslContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSslContactInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sslContactInfo",
		Method:             "GET",
		PathPattern:        "/sslcontact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SslContactInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SslContactInfoOK), nil

}

/*
SslContactList lists ssl contact

Inquire a list of sslcontacts with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) SslContactList(params *SslContactListParams) (*SslContactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSslContactListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sslContactList",
		Method:             "POST",
		PathPattern:        "/sslcontact/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SslContactListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SslContactListOK), nil

}

/*
SslContactUpdate updates ssl contact

Update an existing sslcontact.
*/
func (a *Client) SslContactUpdate(params *SslContactUpdateParams) (*SslContactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSslContactUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sslContactUpdate",
		Method:             "PUT",
		PathPattern:        "/sslcontact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SslContactUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SslContactUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
