// Code generated by go-swagger; DO NOT EDIT.

package domain_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new domain tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DomainAuthinfo1Create creates domain authinfo1

Create an authinfo1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Create(params *DomainAuthinfo1CreateParams) (*DomainAuthinfo1CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo1Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainAuthinfo1CreateOK), nil

}

/*
DomainAuthinfo1Delete deletes domain authinfo1

Delete an existing authinfo1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Delete(params *DomainAuthinfo1DeleteParams) (*DomainAuthinfo1DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1DeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo1Delete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainAuthinfo1DeleteOK), nil

}

/*
DomainAuthinfo2Create creates domain authinfo2

Create an authinfo2 for the specified domain.
*/
func (a *Client) DomainAuthinfo2Create(params *DomainAuthinfo2CreateParams) (*DomainAuthinfo2CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo2CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo2Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo2CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainAuthinfo2CreateOK), nil

}

/*
DomainBuy buys a domain from the premium market

Buy a domain from the premium market. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainBuy(params *DomainBuyParams) (*DomainBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainBuyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainBuy",
		Method:             "POST",
		PathPattern:        "/domain/_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainBuyOK), nil

}

/*
DomainCancelationCreate creates domain cancelation

Create a cancelation for the specified domain.
*/
func (a *Client) DomainCancelationCreate(params *DomainCancelationCreateParams) (*DomainCancelationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationCreate",
		Method:             "POST",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCancelationCreateOK), nil

}

/*
DomainCancelationDelete deletes domain cancelation

Delete an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationDelete(params *DomainCancelationDeleteParams) (*DomainCancelationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationDelete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCancelationDeleteOK), nil

}

/*
DomainCancelationInfo gets domain cancelation

Fetch the cancelation data for the specified domain.
*/
func (a *Client) DomainCancelationInfo(params *DomainCancelationInfoParams) (*DomainCancelationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCancelationInfoOK), nil

}

/*
DomainCancelationList lists cancelation domains

Inquire a list of cancelations with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) DomainCancelationList(params *DomainCancelationListParams) (*DomainCancelationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationList",
		Method:             "POST",
		PathPattern:        "/domain/cancelation/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCancelationListOK), nil

}

/*
DomainCancelationUpdate updates domain cancelation

Update an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationUpdate(params *DomainCancelationUpdateParams) (*DomainCancelationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCancelationUpdateOK), nil

}

/*
DomainCommentUpdate updates domain comment

Update a comment for an existing domain.
*/
func (a *Client) DomainCommentUpdate(params *DomainCommentUpdateParams) (*DomainCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCommentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCommentUpdateOK), nil

}

/*
DomainCreate creates domain

Order a new domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainCreate(params *DomainCreateParams) (*DomainCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCreate",
		Method:             "POST",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainCreateOK), nil

}

/*
DomainInfo gets domain

Fetch the data for the specified domain.
*/
func (a *Client) DomainInfo(params *DomainInfoParams) (*DomainInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainInfoOK), nil

}

/*
DomainList lists domains

Inquire a list of domains with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) DomainList(params *DomainListParams) (*DomainListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainList",
		Method:             "POST",
		PathPattern:        "/domain/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainListOK), nil

}

/*
DomainRenew renews domain

Renew an existing domain.
*/
func (a *Client) DomainRenew(params *DomainRenewParams) (*DomainRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRenew",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainRenewOK), nil

}

/*
DomainRestore restores domain

Restore an existing domain.
*/
func (a *Client) DomainRestore(params *DomainRestoreParams) (*DomainRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRestore",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainRestoreOK), nil

}

/*
DomainRestoreList lists restore domains

Inquire a list of restorable domains with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) DomainRestoreList(params *DomainRestoreListParams) (*DomainRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRestoreList",
		Method:             "POST",
		PathPattern:        "/domain/restore/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainRestoreListOK), nil

}

/*
DomainServicesUpdate updates domain services

Update the services of a domain.
*/
func (a *Client) DomainServicesUpdate(params *DomainServicesUpdateParams) (*DomainServicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainServicesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainServicesUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/_services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainServicesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainServicesUpdateOK), nil

}

/*
DomainStatusUpdate updates domain status

Update the registry status for an existing domain.
*/
func (a *Client) DomainStatusUpdate(params *DomainStatusUpdateParams) (*DomainStatusUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainStatusUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainStatusUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_statusUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainStatusUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainStatusUpdateOK), nil

}

/*
DomainTransfer transfers domain

Transfer a domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainTransfer(params *DomainTransferParams) (*DomainTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainTransfer",
		Method:             "POST",
		PathPattern:        "/domain/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainTransferOK), nil

}

/*
DomainUpdate updates domain

Update an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainUpdate(params *DomainUpdateParams) (*DomainUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
