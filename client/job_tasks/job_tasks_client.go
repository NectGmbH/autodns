// Code generated by go-swagger; DO NOT EDIT.

package job_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new job tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JobCancel cancels job

Cancel the specified job.
*/
func (a *Client) JobCancel(params *JobCancelParams) (*JobCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobCancel",
		Method:             "PUT",
		PathPattern:        "/job/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobCancelOK), nil

}

/*
JobConfirm confirms job

Confirm the specified job.
*/
func (a *Client) JobConfirm(params *JobConfirmParams) (*JobConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobConfirm",
		Method:             "PUT",
		PathPattern:        "/job/{id}/confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobConfirmOK), nil

}

/*
JobHistoryInfo gets history job

Inquire the data for the specified finished job.
*/
func (a *Client) JobHistoryInfo(params *JobHistoryInfoParams) (*JobHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobHistoryInfo",
		Method:             "GET",
		PathPattern:        "/job/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobHistoryInfoOK), nil

}

/*
JobHistoryList lists history jobs

Inquire a list of finished jobs with certain details.
*/
func (a *Client) JobHistoryList(params *JobHistoryListParams) (*JobHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobHistoryList",
		Method:             "POST",
		PathPattern:        "/job/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobHistoryListOK), nil

}

/*
JobInfo gets job

Inquire the data for the specified job.
*/
func (a *Client) JobInfo(params *JobInfoParams) (*JobInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobInfo",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobInfoOK), nil

}

/*
JobList lists jobs

Inquire a list of jobs with certain details.
*/
func (a *Client) JobList(params *JobListParams) (*JobListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobList",
		Method:             "POST",
		PathPattern:        "/job/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobListOK), nil

}

/*
JobReject rejects job

Reject the specified job.
*/
func (a *Client) JobReject(params *JobRejectParams) (*JobRejectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobRejectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobReject",
		Method:             "PUT",
		PathPattern:        "/job/{id}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobRejectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobRejectOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
