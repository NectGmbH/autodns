// Code generated by go-swagger; DO NOT EDIT.

package redirect_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new redirect tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for redirect tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RedirectCreate creates redirect

Create a new redirect.
*/
func (a *Client) RedirectCreate(params *RedirectCreateParams) (*RedirectCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectCreate",
		Method:             "POST",
		PathPattern:        "/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectCreateOK), nil

}

/*
RedirectDelete deletes redirect

Delete an existing redirect.
*/
func (a *Client) RedirectDelete(params *RedirectDeleteParams) (*RedirectDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectDelete",
		Method:             "DELETE",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectDeleteOK), nil

}

/*
RedirectInfo gets redirect

Inquire the data for the specified redirect.
*/
func (a *Client) RedirectInfo(params *RedirectInfoParams) (*RedirectInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectInfo",
		Method:             "GET",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectInfoOK), nil

}

/*
RedirectList lists redirect

Inquire a list of redirects with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) RedirectList(params *RedirectListParams) (*RedirectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectList",
		Method:             "POST",
		PathPattern:        "/redirect/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectListOK), nil

}

/*
RedirectUpdate updates redirect

Update an existing redirect.
*/
func (a *Client) RedirectUpdate(params *RedirectUpdateParams) (*RedirectUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUpdate",
		Method:             "PUT",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
