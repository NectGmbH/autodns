// Code generated by go-swagger; DO NOT EDIT.

package session_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/NectGmbH/autodns/models"
)

// NewLoginParams creates a new LoginParams object
// with the default values initialized.
func NewLoginParams() *LoginParams {
	var ()
	return &LoginParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewLoginParamsWithTimeout creates a new LoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginParamsWithTimeout(timeout time.Duration) *LoginParams {
	var ()
	return &LoginParams{

		requestTimeout: timeout,
	}
}

// NewLoginParamsWithContext creates a new LoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginParamsWithContext(ctx context.Context) *LoginParams {
	var ()
	return &LoginParams{

		Context: ctx,
	}
}

// NewLoginParamsWithHTTPClient creates a new LoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginParamsWithHTTPClient(client *http.Client) *LoginParams {
	var ()
	return &LoginParams{
		HTTPClient: client,
	}
}

/*LoginParams contains all the parameters to send to the API endpoint
for the login operation typically these are written to a http.Request
*/
type LoginParams struct {

	/*XDomainrobotContext*/
	XDomainrobotContext *string
	/*XDomainrobotDemo*/
	XDomainrobotDemo *string
	/*XDomainrobotOwnerContext*/
	XDomainrobotOwnerContext *string
	/*XDomainrobotOwnerUser*/
	XDomainrobotOwnerUser *string
	/*XDomainrobotPIN*/
	XDomainrobotPIN *string
	/*XDomainrobotSessionID*/
	XDomainrobotSessionID *string
	/*XDomainrobotWS*/
	XDomainrobotWS *string
	/*ACL
	  Specifies whether the acls are returned in the response. Returns extra data if parameter is set. Example : ?acl

	*/
	ACL *string
	/*Body
	  user

	*/
	Body *models.LoginData
	/*Customer
	  Specifies whether the customer data is returned in the response. Returns extra data if parameter is set. Example : ?customer

	*/
	Customer *string
	/*Profiles
	  Specifies whether the user profile is returned in the response. Returns extra data if parameter is set. Example : ?profiles

	*/
	Profiles *string
	/*Timeout
	  Defines the timeout of the session in minutes. Default is 10 minutes. Example : timeout=60

	*/
	Timeout *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the login params
func (o *LoginParams) WithRequestTimeout(timeout time.Duration) *LoginParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the login params
func (o *LoginParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the login params
func (o *LoginParams) WithContext(ctx context.Context) *LoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login params
func (o *LoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) WithHTTPClient(client *http.Client) *LoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDomainrobotContext adds the xDomainrobotContext to the login params
func (o *LoginParams) WithXDomainrobotContext(xDomainrobotContext *string) *LoginParams {
	o.SetXDomainrobotContext(xDomainrobotContext)
	return o
}

// SetXDomainrobotContext adds the xDomainrobotContext to the login params
func (o *LoginParams) SetXDomainrobotContext(xDomainrobotContext *string) {
	o.XDomainrobotContext = xDomainrobotContext
}

// WithXDomainrobotDemo adds the xDomainrobotDemo to the login params
func (o *LoginParams) WithXDomainrobotDemo(xDomainrobotDemo *string) *LoginParams {
	o.SetXDomainrobotDemo(xDomainrobotDemo)
	return o
}

// SetXDomainrobotDemo adds the xDomainrobotDemo to the login params
func (o *LoginParams) SetXDomainrobotDemo(xDomainrobotDemo *string) {
	o.XDomainrobotDemo = xDomainrobotDemo
}

// WithXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the login params
func (o *LoginParams) WithXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) *LoginParams {
	o.SetXDomainrobotOwnerContext(xDomainrobotOwnerContext)
	return o
}

// SetXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the login params
func (o *LoginParams) SetXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) {
	o.XDomainrobotOwnerContext = xDomainrobotOwnerContext
}

// WithXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the login params
func (o *LoginParams) WithXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) *LoginParams {
	o.SetXDomainrobotOwnerUser(xDomainrobotOwnerUser)
	return o
}

// SetXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the login params
func (o *LoginParams) SetXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) {
	o.XDomainrobotOwnerUser = xDomainrobotOwnerUser
}

// WithXDomainrobotPIN adds the xDomainrobotPIN to the login params
func (o *LoginParams) WithXDomainrobotPIN(xDomainrobotPIN *string) *LoginParams {
	o.SetXDomainrobotPIN(xDomainrobotPIN)
	return o
}

// SetXDomainrobotPIN adds the xDomainrobotPIN to the login params
func (o *LoginParams) SetXDomainrobotPIN(xDomainrobotPIN *string) {
	o.XDomainrobotPIN = xDomainrobotPIN
}

// WithXDomainrobotSessionID adds the xDomainrobotSessionID to the login params
func (o *LoginParams) WithXDomainrobotSessionID(xDomainrobotSessionID *string) *LoginParams {
	o.SetXDomainrobotSessionID(xDomainrobotSessionID)
	return o
}

// SetXDomainrobotSessionID adds the xDomainrobotSessionId to the login params
func (o *LoginParams) SetXDomainrobotSessionID(xDomainrobotSessionID *string) {
	o.XDomainrobotSessionID = xDomainrobotSessionID
}

// WithXDomainrobotWS adds the xDomainrobotWS to the login params
func (o *LoginParams) WithXDomainrobotWS(xDomainrobotWS *string) *LoginParams {
	o.SetXDomainrobotWS(xDomainrobotWS)
	return o
}

// SetXDomainrobotWS adds the xDomainrobotWS to the login params
func (o *LoginParams) SetXDomainrobotWS(xDomainrobotWS *string) {
	o.XDomainrobotWS = xDomainrobotWS
}

// WithACL adds the acl to the login params
func (o *LoginParams) WithACL(acl *string) *LoginParams {
	o.SetACL(acl)
	return o
}

// SetACL adds the acl to the login params
func (o *LoginParams) SetACL(acl *string) {
	o.ACL = acl
}

// WithBody adds the body to the login params
func (o *LoginParams) WithBody(body *models.LoginData) *LoginParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the login params
func (o *LoginParams) SetBody(body *models.LoginData) {
	o.Body = body
}

// WithCustomer adds the customer to the login params
func (o *LoginParams) WithCustomer(customer *string) *LoginParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the login params
func (o *LoginParams) SetCustomer(customer *string) {
	o.Customer = customer
}

// WithProfiles adds the profiles to the login params
func (o *LoginParams) WithProfiles(profiles *string) *LoginParams {
	o.SetProfiles(profiles)
	return o
}

// SetProfiles adds the profiles to the login params
func (o *LoginParams) SetProfiles(profiles *string) {
	o.Profiles = profiles
}

// WithTimeout adds the timeout to the login params
func (o *LoginParams) WithTimeout(timeout *string) *LoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login params
func (o *LoginParams) SetTimeout(timeout *string) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *LoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.XDomainrobotContext != nil {

		// header param X-Domainrobot-Context
		if err := r.SetHeaderParam("X-Domainrobot-Context", *o.XDomainrobotContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotDemo != nil {

		// header param X-Domainrobot-Demo
		if err := r.SetHeaderParam("X-Domainrobot-Demo", *o.XDomainrobotDemo); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerContext != nil {

		// header param X-Domainrobot-Owner-Context
		if err := r.SetHeaderParam("X-Domainrobot-Owner-Context", *o.XDomainrobotOwnerContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerUser != nil {

		// header param X-Domainrobot-Owner-User
		if err := r.SetHeaderParam("X-Domainrobot-Owner-User", *o.XDomainrobotOwnerUser); err != nil {
			return err
		}

	}

	if o.XDomainrobotPIN != nil {

		// header param X-Domainrobot-PIN
		if err := r.SetHeaderParam("X-Domainrobot-PIN", *o.XDomainrobotPIN); err != nil {
			return err
		}

	}

	if o.XDomainrobotSessionID != nil {

		// header param X-Domainrobot-SessionId
		if err := r.SetHeaderParam("X-Domainrobot-SessionId", *o.XDomainrobotSessionID); err != nil {
			return err
		}

	}

	if o.XDomainrobotWS != nil {

		// header param X-Domainrobot-WS
		if err := r.SetHeaderParam("X-Domainrobot-WS", *o.XDomainrobotWS); err != nil {
			return err
		}

	}

	if o.ACL != nil {

		// query param acl
		var qrACL string
		if o.ACL != nil {
			qrACL = *o.ACL
		}
		qACL := qrACL
		if qACL != "" {
			if err := r.SetQueryParam("acl", qACL); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Customer != nil {

		// query param customer
		var qrCustomer string
		if o.Customer != nil {
			qrCustomer = *o.Customer
		}
		qCustomer := qrCustomer
		if qCustomer != "" {
			if err := r.SetQueryParam("customer", qCustomer); err != nil {
				return err
			}
		}

	}

	if o.Profiles != nil {

		// query param profiles
		var qrProfiles string
		if o.Profiles != nil {
			qrProfiles = *o.Profiles
		}
		qProfiles := qrProfiles
		if qProfiles != "" {
			if err := r.SetQueryParam("profiles", qProfiles); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout string
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := qrTimeout
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
