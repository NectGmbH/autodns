// Code generated by go-swagger; DO NOT EDIT.

package certificate_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/NectGmbH/autodns/models"
)

// NewCertificateCreateParams creates a new CertificateCreateParams object
// with the default values initialized.
func NewCertificateCreateParams() *CertificateCreateParams {
	var ()
	return &CertificateCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCertificateCreateParamsWithTimeout creates a new CertificateCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCertificateCreateParamsWithTimeout(timeout time.Duration) *CertificateCreateParams {
	var ()
	return &CertificateCreateParams{

		timeout: timeout,
	}
}

// NewCertificateCreateParamsWithContext creates a new CertificateCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewCertificateCreateParamsWithContext(ctx context.Context) *CertificateCreateParams {
	var ()
	return &CertificateCreateParams{

		Context: ctx,
	}
}

// NewCertificateCreateParamsWithHTTPClient creates a new CertificateCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCertificateCreateParamsWithHTTPClient(client *http.Client) *CertificateCreateParams {
	var ()
	return &CertificateCreateParams{
		HTTPClient: client,
	}
}

/*CertificateCreateParams contains all the parameters to send to the API endpoint
for the certificate create operation typically these are written to a http.Request
*/
type CertificateCreateParams struct {

	/*XDomainrobotContext*/
	XDomainrobotContext *string
	/*XDomainrobotDemo*/
	XDomainrobotDemo *string
	/*XDomainrobotOwnerContext*/
	XDomainrobotOwnerContext *string
	/*XDomainrobotOwnerUser*/
	XDomainrobotOwnerUser *string
	/*XDomainrobotPIN*/
	XDomainrobotPIN *string
	/*XDomainrobotSessionID*/
	XDomainrobotSessionID *string
	/*XDomainrobotWS*/
	XDomainrobotWS *string
	/*Body
	  certificate

	*/
	Body *models.Certificate

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the certificate create params
func (o *CertificateCreateParams) WithTimeout(timeout time.Duration) *CertificateCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the certificate create params
func (o *CertificateCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the certificate create params
func (o *CertificateCreateParams) WithContext(ctx context.Context) *CertificateCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the certificate create params
func (o *CertificateCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the certificate create params
func (o *CertificateCreateParams) WithHTTPClient(client *http.Client) *CertificateCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the certificate create params
func (o *CertificateCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDomainrobotContext adds the xDomainrobotContext to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotContext(xDomainrobotContext *string) *CertificateCreateParams {
	o.SetXDomainrobotContext(xDomainrobotContext)
	return o
}

// SetXDomainrobotContext adds the xDomainrobotContext to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotContext(xDomainrobotContext *string) {
	o.XDomainrobotContext = xDomainrobotContext
}

// WithXDomainrobotDemo adds the xDomainrobotDemo to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotDemo(xDomainrobotDemo *string) *CertificateCreateParams {
	o.SetXDomainrobotDemo(xDomainrobotDemo)
	return o
}

// SetXDomainrobotDemo adds the xDomainrobotDemo to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotDemo(xDomainrobotDemo *string) {
	o.XDomainrobotDemo = xDomainrobotDemo
}

// WithXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) *CertificateCreateParams {
	o.SetXDomainrobotOwnerContext(xDomainrobotOwnerContext)
	return o
}

// SetXDomainrobotOwnerContext adds the xDomainrobotOwnerContext to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotOwnerContext(xDomainrobotOwnerContext *string) {
	o.XDomainrobotOwnerContext = xDomainrobotOwnerContext
}

// WithXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) *CertificateCreateParams {
	o.SetXDomainrobotOwnerUser(xDomainrobotOwnerUser)
	return o
}

// SetXDomainrobotOwnerUser adds the xDomainrobotOwnerUser to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotOwnerUser(xDomainrobotOwnerUser *string) {
	o.XDomainrobotOwnerUser = xDomainrobotOwnerUser
}

// WithXDomainrobotPIN adds the xDomainrobotPIN to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotPIN(xDomainrobotPIN *string) *CertificateCreateParams {
	o.SetXDomainrobotPIN(xDomainrobotPIN)
	return o
}

// SetXDomainrobotPIN adds the xDomainrobotPIN to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotPIN(xDomainrobotPIN *string) {
	o.XDomainrobotPIN = xDomainrobotPIN
}

// WithXDomainrobotSessionID adds the xDomainrobotSessionID to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotSessionID(xDomainrobotSessionID *string) *CertificateCreateParams {
	o.SetXDomainrobotSessionID(xDomainrobotSessionID)
	return o
}

// SetXDomainrobotSessionID adds the xDomainrobotSessionId to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotSessionID(xDomainrobotSessionID *string) {
	o.XDomainrobotSessionID = xDomainrobotSessionID
}

// WithXDomainrobotWS adds the xDomainrobotWS to the certificate create params
func (o *CertificateCreateParams) WithXDomainrobotWS(xDomainrobotWS *string) *CertificateCreateParams {
	o.SetXDomainrobotWS(xDomainrobotWS)
	return o
}

// SetXDomainrobotWS adds the xDomainrobotWS to the certificate create params
func (o *CertificateCreateParams) SetXDomainrobotWS(xDomainrobotWS *string) {
	o.XDomainrobotWS = xDomainrobotWS
}

// WithBody adds the body to the certificate create params
func (o *CertificateCreateParams) WithBody(body *models.Certificate) *CertificateCreateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the certificate create params
func (o *CertificateCreateParams) SetBody(body *models.Certificate) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *CertificateCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XDomainrobotContext != nil {

		// header param X-Domainrobot-Context
		if err := r.SetHeaderParam("X-Domainrobot-Context", *o.XDomainrobotContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotDemo != nil {

		// header param X-Domainrobot-Demo
		if err := r.SetHeaderParam("X-Domainrobot-Demo", *o.XDomainrobotDemo); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerContext != nil {

		// header param X-Domainrobot-Owner-Context
		if err := r.SetHeaderParam("X-Domainrobot-Owner-Context", *o.XDomainrobotOwnerContext); err != nil {
			return err
		}

	}

	if o.XDomainrobotOwnerUser != nil {

		// header param X-Domainrobot-Owner-User
		if err := r.SetHeaderParam("X-Domainrobot-Owner-User", *o.XDomainrobotOwnerUser); err != nil {
			return err
		}

	}

	if o.XDomainrobotPIN != nil {

		// header param X-Domainrobot-PIN
		if err := r.SetHeaderParam("X-Domainrobot-PIN", *o.XDomainrobotPIN); err != nil {
			return err
		}

	}

	if o.XDomainrobotSessionID != nil {

		// header param X-Domainrobot-SessionId
		if err := r.SetHeaderParam("X-Domainrobot-SessionId", *o.XDomainrobotSessionID); err != nil {
			return err
		}

	}

	if o.XDomainrobotWS != nil {

		// header param X-Domainrobot-WS
		if err := r.SetHeaderParam("X-Domainrobot-WS", *o.XDomainrobotWS); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
