// Code generated by go-swagger; DO NOT EDIT.

package certificate_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new certificate tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CertificateCommentUpdate updates certificate comment

Update a comment for an existing certificate.
*/
func (a *Client) CertificateCommentUpdate(params *CertificateCommentUpdateParams) (*CertificateCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateCommentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateCommentUpdateOK), nil

}

/*
CertificateCreate creates certificate

Order a new certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateCreate(params *CertificateCreateParams) (*CertificateCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateCreate",
		Method:             "POST",
		PathPattern:        "/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateCreateOK), nil

}

/*
CertificateDelete deletes certificate

Delete an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateDelete(params *CertificateDeleteParams) (*CertificateDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateDelete",
		Method:             "DELETE",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateDeleteOK), nil

}

/*
CertificateList lists certificates

Inquire a list of certificates with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) CertificateList(params *CertificateListParams) (*CertificateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateList",
		Method:             "POST",
		PathPattern:        "/certificate/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateListOK), nil

}

/*
CertificatePrepareOrder prepares certificate order

Prepare a certificate order. This call checks the csr and generates authentication data required for further calls like order, renew, reissue, revoke, delete.
*/
func (a *Client) CertificatePrepareOrder(params *CertificatePrepareOrderParams) (*CertificatePrepareOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificatePrepareOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificatePrepareOrder",
		Method:             "POST",
		PathPattern:        "/certificate/_prepareOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificatePrepareOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificatePrepareOrderOK), nil

}

/*
CertificateReissue reissues certificate

Reissue an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateReissue(params *CertificateReissueParams) (*CertificateReissueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateReissueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateReissue",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateReissueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateReissueOK), nil

}

/*
CertificateRenew renews certificate

Renew an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateRenew(params *CertificateRenewParams) (*CertificateRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateRenew",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateRenewOK), nil

}

/*
CertificateRevoke revokes certificate

Revoke an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateRevoke(params *CertificateRevokeParams) (*CertificateRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateRevoke",
		Method:             "DELETE",
		PathPattern:        "/certificate/{id}/_revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateRevokeOK), nil

}

/*
Certificateinfo gets certificate

Inquire the data for the specified certificate.
*/
func (a *Client) Certificateinfo(params *CertificateinfoParams) (*CertificateinfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateinfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateinfo",
		Method:             "GET",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateinfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CertificateinfoOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
