// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DomainStudioSources domain studio sources
// swagger:model DomainStudioSources
type DomainStudioSources struct {

	// The configuration for the geo source
	Geo *DomainStudioSourceGeo `json:"geo,omitempty"`

	// The configuration for the initial source
	Initial *DomainStudioSourceInitial `json:"initial,omitempty"`

	// The configuration for the premium source
	Premium *DomainStudioSourcePremium `json:"premium,omitempty"`

	// The configuration for the recommended source
	Recommended *DomainStudioSourceSimilar `json:"recommended,omitempty"`

	// The configuration for the similar source
	Similar *DomainStudioSourceSimilar `json:"similar,omitempty"`

	// The configuration for the suggestion source
	Suggestion *DomainStudioSourceSuggestion `json:"suggestion,omitempty"`
}

// Validate validates this domain studio sources
func (m *DomainStudioSources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommended(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimilar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainStudioSources) validateGeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Geo) { // not required
		return nil
	}

	if m.Geo != nil {
		if err := m.Geo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geo")
			}
			return err
		}
	}

	return nil
}

func (m *DomainStudioSources) validateInitial(formats strfmt.Registry) error {

	if swag.IsZero(m.Initial) { // not required
		return nil
	}

	if m.Initial != nil {
		if err := m.Initial.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial")
			}
			return err
		}
	}

	return nil
}

func (m *DomainStudioSources) validatePremium(formats strfmt.Registry) error {

	if swag.IsZero(m.Premium) { // not required
		return nil
	}

	if m.Premium != nil {
		if err := m.Premium.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium")
			}
			return err
		}
	}

	return nil
}

func (m *DomainStudioSources) validateRecommended(formats strfmt.Registry) error {

	if swag.IsZero(m.Recommended) { // not required
		return nil
	}

	if m.Recommended != nil {
		if err := m.Recommended.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended")
			}
			return err
		}
	}

	return nil
}

func (m *DomainStudioSources) validateSimilar(formats strfmt.Registry) error {

	if swag.IsZero(m.Similar) { // not required
		return nil
	}

	if m.Similar != nil {
		if err := m.Similar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("similar")
			}
			return err
		}
	}

	return nil
}

func (m *DomainStudioSources) validateSuggestion(formats strfmt.Registry) error {

	if swag.IsZero(m.Suggestion) { // not required
		return nil
	}

	if m.Suggestion != nil {
		if err := m.Suggestion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suggestion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainStudioSources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainStudioSources) UnmarshalBinary(b []byte) error {
	var res DomainStudioSources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
