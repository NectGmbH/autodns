// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DNSSecEntity DNS sec entity
// swagger:model DNSSecEntity
type DNSSecEntity struct {

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The dnsSecs.
	DNSSecs []*DNSSec `json:"dnsSecs"`

	// The dsRecordRemoved.
	// Format: date-time
	DsRecordRemoved strfmt.DateTime `json:"dsRecordRemoved,omitempty"`

	// The idn version of the name.
	Idn string `json:"idn,omitempty"`

	// The lastRollover.
	// Format: date-time
	LastRollover strfmt.DateTime `json:"lastRollover,omitempty"`

	// The logId.
	LogID int64 `json:"logId,omitempty"`

	// The domain.
	// Required: true
	Name *string `json:"name"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this DNS sec entity
func (m *DNSSecEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSSecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDsRecordRemoved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRollover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DNSSecEntity) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DNSSecEntity) validateDNSSecs(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSecs) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSSecs); i++ {
		if swag.IsZero(m.DNSSecs[i]) { // not required
			continue
		}

		if m.DNSSecs[i] != nil {
			if err := m.DNSSecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnsSecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DNSSecEntity) validateDsRecordRemoved(formats strfmt.Registry) error {

	if swag.IsZero(m.DsRecordRemoved) { // not required
		return nil
	}

	if err := validate.FormatOf("dsRecordRemoved", "body", "date-time", m.DsRecordRemoved.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DNSSecEntity) validateLastRollover(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRollover) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRollover", "body", "date-time", m.LastRollover.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DNSSecEntity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DNSSecEntity) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DNSSecEntity) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DNSSecEntity) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DNSSecEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSSecEntity) UnmarshalBinary(b []byte) error {
	var res DNSSecEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
