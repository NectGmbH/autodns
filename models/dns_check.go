// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DNSCheck DNS check
// swagger:model DNSCheck
type DNSCheck string

const (

	// DNSCheckSOA captures enum value "SOA"
	DNSCheckSOA DNSCheck = "SOA"

	// DNSCheckNS captures enum value "NS"
	DNSCheckNS DNSCheck = "NS"

	// DNSCheckALL captures enum value "ALL"
	DNSCheckALL DNSCheck = "ALL"

	// DNSCheckNONE captures enum value "NONE"
	DNSCheckNONE DNSCheck = "NONE"
)

// for schema
var dnsCheckEnum []interface{}

func init() {
	var res []DNSCheck
	if err := json.Unmarshal([]byte(`["SOA","NS","ALL","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dnsCheckEnum = append(dnsCheckEnum, v)
	}
}

func (m DNSCheck) validateDNSCheckEnum(path, location string, value DNSCheck) error {
	if err := validate.Enum(path, location, value, dnsCheckEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this DNS check
func (m DNSCheck) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDNSCheckEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
